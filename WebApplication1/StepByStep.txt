

1. Right Click on Empty Asp.Net project 
2. Click Add
3. Add Web Service - CalculatorWebService.asmx
4. Rename WebService namespace in WebService class file
5. Create add method
6. Run WebService by right click on '.asmx' file and click 'View in Browser'

7. Add new project 'CalculatorWebApplication'
8. Now generate proxy class -> Right Click on 'Reference' inside your Project -> Add Service Reference
9. In the Address Bar, copy '.asmx?WSDL' link of your Web Service and click 'Add'
** Adding '?WSDL' in the end is not mandotary
(If it's detected, it'll be add on 'Services' list)
(If you expand that it'll also show all available methods of your WebService)
10. Write 'CalculatorService' in 'Namespace' bar and click OK

** Now your web service has been added to your 'CalculatorWebApplication' Project

11. Right Click on your project file and add a form 'Webform1.aspx' ** Complete your form code
	> Go to design mode and generate 'btnAdd' event bu double clicking it in your '.cs' file

12. Set your WebForm Project as 'Startup Project' and Set 'WebForm1.aspx' as 'StartUp File'

13. Create New Add Method and Set 'EnableSession=true' to 'WebMethod' attribute

14. Right click on '.asmx'  file in 'WebApplicaiton1' and select 'View With' or 'View In Browser'

15. Click on 'Add2' method and do some calculations

16. Now click on 'GetCalculations' method in your '.asmx' page and click on 'Invoke', all calculations will be listed here

17. Right click on 'CalculatorService' in your 'CalculatorWebApplication' project and click 'Update Service Reference'
*** Do this everytime you make changes in your 'Web Service'

18. Go to 'Webform1.aspx' and add 'GridView'

19. Go to 'Webform1.aspx.cs' and invoke 'getCalculations' method inside 'btnAdd_Click' method

20. Allow cookies in 'Web.config' binding tag

21. Run 'WebForm1.aspx' in browser and do some calculations

22. Add Description to Add2 method in 'CalculatorWebServices.asmx.cs' file

23. Open '.asmx' file in browser to see description under method name

24. Add 'Cache Duration' to 'Add2' method in your 'CalculatorWebServices.asmx.cs' file 
** Cache duration will store the current output in cache for as long as 'cache duration' time 
	and within that time if the next output is same as the stored output it'll do nothing 
	and our web service will not be reprocessed for that operation

25. Build project and Update Service then run 'WebForm1'

26. Create two methods for multiplicaiton for method overloading in 'CalculatorWebServices.asmx.cs' file

27. CREATE NEW PROJECT 'WebServicePractice'

28. Create table 'tblStudent' in your local database

29. Insert some entries and create stored procedure to get data by ID named "spGetStudentByID"

30. Create ConnectionString in Web.Config

31. Create 'GetStudentById' method in 'StudentService.asmx.cs'

32. View 'StudentService.asmx' in browser, Insert ID of a student and Invoke function

33. Add WebForm in 'WebServicePractice' project

34. Uncomment 'ScriptService' from the top of 'StudentService' class

35. Add 'Service Path' inside 'ScriptManager' tag on 'WebForm1' from toolbox

36. Add 'JavaScript' on 'WebForm1'
	 >  Add Success & Fail callback function and add them in parameters of 'WebServicePractice.StudentService.GetStudentById()' method
	** Now invalid inout will alert an error

/************************** LECTURE 6 END

/**********************  LECTURE 7
/********************** WEATHER WEB SERVICE NOT WORKING
37. ADD NEW PROJECT
	> WeatherWebServiceDemo

38. Add Table on WebForm1

39. Add WebService in project
	Solution Explorer > Add > Service Reference

40. Add click event of 'btnGetWeather_Click' in 'WebForm1.aspx.cs' file

